{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "string",
      "enum": [
        "register_submitter",
        "un_register_submitter"
      ]
    },
    {
      "type": "object",
      "required": [
        "submit_beacon_chain_light_client_update"
      ],
      "properties": {
        "submit_beacon_chain_light_client_update": {
          "$ref": "#/definitions/LightClientUpdate"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "submit_execution_header"
      ],
      "properties": {
        "submit_execution_header": {
          "$ref": "#/definitions/BlockHeader"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_trusted_signer"
      ],
      "properties": {
        "update_trusted_signer": {
          "type": "object",
          "properties": {
            "trusted_signer": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Array_of_uint8": {
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      }
    },
    "BeaconBlockHeader": {
      "type": "object",
      "required": [
        "body_root",
        "parent_root",
        "proposer_index",
        "slot",
        "state_root"
      ],
      "properties": {
        "body_root": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "parent_root": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "proposer_index": {
          "type": "string"
        },
        "slot": {
          "type": "string"
        },
        "state_root": {
          "$ref": "#/definitions/Array_of_uint8"
        }
      },
      "additionalProperties": false
    },
    "BlockHeader": {
      "type": "object",
      "required": [
        "author",
        "base_fee_per_gas",
        "difficulty",
        "extra_data",
        "gas_limit",
        "gas_used",
        "log_bloom",
        "mix_hash",
        "nonce",
        "number",
        "parent_hash",
        "receipts_root",
        "state_root",
        "timestamp",
        "transactions_root",
        "uncles_hash"
      ],
      "properties": {
        "author": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "base_fee_per_gas": {
          "type": "string"
        },
        "difficulty": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "extra_data": {
          "type": "string"
        },
        "gas_limit": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "gas_used": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "hash": {
          "anyOf": [
            {
              "$ref": "#/definitions/Array_of_uint8"
            },
            {
              "type": "null"
            }
          ]
        },
        "log_bloom": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "mix_hash": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "nonce": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "number": {
          "type": "string"
        },
        "parent_hash": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "partial_hash": {
          "anyOf": [
            {
              "$ref": "#/definitions/Array_of_uint8"
            },
            {
              "type": "null"
            }
          ]
        },
        "receipts_root": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "state_root": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "timestamp": {
          "type": "string"
        },
        "transactions_root": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "uncles_hash": {
          "$ref": "#/definitions/Array_of_uint8"
        }
      },
      "additionalProperties": false
    },
    "FinalizedHeaderUpdate": {
      "type": "object",
      "required": [
        "finality_branch",
        "header_update"
      ],
      "properties": {
        "finality_branch": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Array_of_uint8"
          }
        },
        "header_update": {
          "$ref": "#/definitions/HeaderUpdate"
        }
      },
      "additionalProperties": false
    },
    "HeaderUpdate": {
      "type": "object",
      "required": [
        "beacon_header",
        "execution_block_hash",
        "execution_hash_branch"
      ],
      "properties": {
        "beacon_header": {
          "$ref": "#/definitions/BeaconBlockHeader"
        },
        "execution_block_hash": {
          "$ref": "#/definitions/Array_of_uint8"
        },
        "execution_hash_branch": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Array_of_uint8"
          }
        }
      },
      "additionalProperties": false
    },
    "LightClientUpdate": {
      "type": "object",
      "required": [
        "attested_beacon_header",
        "finality_update",
        "signature_slot",
        "sync_aggregate"
      ],
      "properties": {
        "attested_beacon_header": {
          "$ref": "#/definitions/BeaconBlockHeader"
        },
        "finality_update": {
          "$ref": "#/definitions/FinalizedHeaderUpdate"
        },
        "signature_slot": {
          "type": "string"
        },
        "sync_aggregate": {
          "$ref": "#/definitions/SyncAggregate"
        },
        "sync_committee_update": {
          "anyOf": [
            {
              "$ref": "#/definitions/SyncCommitteeUpdate"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "String": {
      "type": "string"
    },
    "SyncAggregate": {
      "type": "object",
      "required": [
        "sync_committee_bits",
        "sync_committee_signature"
      ],
      "properties": {
        "sync_committee_bits": {
          "$ref": "#/definitions/String"
        },
        "sync_committee_signature": {
          "$ref": "#/definitions/String"
        }
      },
      "additionalProperties": false
    },
    "SyncCommittee": {
      "type": "object",
      "required": [
        "aggregate_pubkey",
        "pubkeys"
      ],
      "properties": {
        "aggregate_pubkey": {
          "$ref": "#/definitions/String"
        },
        "pubkeys": {
          "$ref": "#/definitions/SyncCommitteePublicKeys"
        }
      },
      "additionalProperties": false
    },
    "SyncCommitteePublicKeys": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/String"
      }
    },
    "SyncCommitteeUpdate": {
      "type": "object",
      "required": [
        "next_sync_committee",
        "next_sync_committee_branch"
      ],
      "properties": {
        "next_sync_committee": {
          "$ref": "#/definitions/SyncCommittee"
        },
        "next_sync_committee_branch": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Array_of_uint8"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
